
<!DOCTYPE html>
<html>
    <head>
        <script>
/*var fbwins,fbtotal;
var firebaseConfig = {
    apiKey: "AIzaSyC2EuHWK-zb7yabg31oGYuFRwwFSOzfxko",
    authDomain: "jsnamit-dbd9b.firebaseapp.com",
    databaseURL: "https://jsnamit-dbd9b.fiebaseio.com",
    projectId: "jsnamit-dbd9b",
    storageBucket: "jsnamit-dbd9b.appspotcom",
    messagingSenderId: "969284339798",
    appId: "1:969284339798:web:f8a02524c72572613f7"
};
firebase.initializeApp(firebaseConfig);
firebase.database().ref("test/2048").on('value',function(snapshot) {
    fbwins = parseInt(snapshot.val().wins);
    fbtotal = parseInt(snapshot.val().total);
});*/

var WINNING_NUMBER = 2048;
var moves = 0;

var dim = 4,box,blocks,blocknumber=[[],[],[],[]],color = {},left,right,down,up,body,replay,result,alpha=0,yes,p,t5,won="no,t2",next,n,t7,maxind,reduce=50,range,start,pause=false,MyAlert,ct1,ct2,s;

blocks = [];
for (let i = 0; i < dim; i++) {
    for (let j = 0; j < dim; j++) {
        blocks.push([i,j]);
        blocknumber[i][j] = 1;
    }
}

var r = 255;
var g = 90;
for (let i = 1; i <= 2048; i*=2) {
    color[i] = [r,g,g-90];
    r-=15;
    g+=15;
}

/*function Alert() {
    if (fbwins !== undefined) {
        var x = Math.round(fbwins*100000/fbtotal)/1000;
        alert("Here's my try on AI for this game! I tried my best to build an AI that would win everytime but unfortunately I was unsuccessful! :(\nBut this AI is also decent, and sometimes able to make 2048 too! Its win rate is better than mine (I am an experienced player of 2048)\n\nIts win rate is:\n"+x+"%\n\nTotal wins:"+fbwins+"\nTotal lost:"+(fbtotal-fbwins));
        clearInterval(MyAlert);
       document.getElementById("Loader").style.display = "none";
        document.getElementById("load").style.display = "none";
        document.getElementById("start").style.display = "block";
        ct1 = fbwins;
        ct2 = fbtotal;
    }
}*/

window.onload = function() {
    p = document.getElementById("progress");
    box = document.getElementById("box");
    body = document.getElementsByTagName("body")[0];
    replay = document.getElementById("replay");
    result = document.getElementById("result");
    yes = document.getElementById("yes");
    range = document.getElementById("range");
    replay.style.display = "none";
    document.getElementById("Loader").style.display = "none";
    document.getElementById("load").style.display = "none";
    document.getElementById("start").style.display = "block";
    //MyAlert = setInterval(Alert,100);
    var begin = document.getElementById("begin");
    begin.addEventListener('click',function() {
        document.getElementById("start").style.display = "none";
        document.getElementById("Game").style.display = "block";
        var t = setInterval(Update, 10);
        t2 = setInterval(GameReplay,10);
        var t3 = setInterval(reset,10);
        var t4 = setInterval(MyMoves, 10);
        t5 = setInterval(Rating,10);
        var t6 = setInterval(F,10);
        setTimeout(AI,1000);
    });
    
    for (let i = 0; i < blocks.length; i++) {
        box.innerHTML += `<div class = 'block' id = 'b${blocks[i][0]}${blocks[i][1]}' style = 'top:${blocks[i][0]*80}px;left:${blocks[i][1]*80}px;'>`;
    }
    
    left = document.getElementById("l");
    right = document.getElementById("r");
    down = document.getElementById("d");
    up = document.getElementById("u");
    
    randomPlace();
    randomPlace();
    /*firebase.database().ref("test/2048").on('value',function(snapshot) {
        x = parseInt(snapshot.val().wins)+1;
    });*/
};

function randomPlace() {
    let val = 2;
    var count = 0;
    var a = Math.floor(Math.random()*dim);
    var b = Math.floor(Math.random()*dim);
    
    while (blocknumber[a][b] != 1) {
        count++;
        a = Math.floor(Math.random()*dim);
        b = Math.floor(Math.random()*dim);
        if (count > 500) {
            break;
        }
    }
    //console.log(a + "   " + b);
    if (count < 500) {
        blocknumber[a][b] = val;
        let n = document.getElementById(`b${a}${b}`);
        n.style.background = `rgb(${color[val]})`;
        n.innerHTML = val;
    }
}

function DownClick() {
    var c = [0,0,0,0];
    for (let i = blocknumber.length-1;i>-1;i--) {
        for (let j = 0; j < blocknumber[i].length;j++) {
            if (blocknumber[i][j] != 1) {
                [blocknumber[i][j],blocknumber[dim-1-c[j]][j]] = [1,blocknumber[i][j]];
                c[j]++;
            }
        }
    }
    
    for (let i = blocknumber.length-1; i > 0; i--) {
        for (let j = 0; j < blocknumber[i].length; j++) {
            if (blocknumber[i][j] == blocknumber[i-1][j] && blocknumber[i][j] != 1) {
                blocknumber[i][j] *= 2;
                blocknumber[i-1][j] = 1;
                DownClick();
            }
        }
    }
}

function UpClick() {
    var c = [0,0,0,0];
    for (let i = 0;i < blocknumber.length;i++) {
        for (let j = 0; j < blocknumber[i].length;j++) {
            if (blocknumber[i][j] != 1) {
                [blocknumber[i][j],blocknumber[c[j]][j]] = [1,blocknumber[i][j]];
                c[j]++;
            }
        }
    }
    
    for (let i = 0; i < blocknumber.length-1; i++) {
        for (let j = 0; j < blocknumber[i].length; j++) {
            if (blocknumber[i][j] == blocknumber[i+1][j] && blocknumber[i][j] != 1) {
                blocknumber[i][j] *= 2;
                blocknumber[i+1][j] = 1;
                UpClick();
            }
        }
    }
}

function LeftClick() {
    var c = [0,0,0,0];
    for (let i = 0; i < blocknumber.length; i++) {
        for (let j = 0; j < blocknumber[i].length; j++) {
            if (blocknumber[i][j] != 1) {
                [blocknumber[i][j],blocknumber[i][c[i]]] = [1,blocknumber[i][j]];
                c[i]++;
            }
        }
    }
    
    for (let i = 0; i < blocknumber.length; i++) {
        for (let j = 0; j < blocknumber.length-1; j++) {
            if (blocknumber[i][j] == blocknumber[i][j+1] && blocknumber[i][j] != 1) {
                blocknumber[i][j] *= 2;
                blocknumber[i][j+1] = 1;
                LeftClick();
            }
        }
    }
}

function RightClick() {
    var c = [0,0,0,0];
    for (let i = 0; i < blocknumber.length; i++) {
        for (let j = blocknumber.length-1; j > -1; j--) {
            if (blocknumber[i][j] != 1) {
                [blocknumber[i][j],blocknumber[i][dim-1-c[i]]] = [1,blocknumber[i][j]];
                c[i]++;
            }
        }
    }
    
    for (let i = 0; i < blocknumber.length; i++) {
        for (let j = blocknumber.length-1; j > 0; j--) {
            if (blocknumber[i][j] == blocknumber[i][j-1] && blocknumber[i][j] != 1) {
                blocknumber[i][j] *= 2;
                blocknumber[i][j-1] = 1;
                RightClick();
            }
        }
    }
}

function Update() {
    for (let i = 0; i < dim; i++) {
        for (let j = 0; j < dim; j++) {
            let n = document.getElementById(`b${i}${j}`);
            
            if (n !== null) {
                if (blocknumber[i][j] != 1) {
                    n.style.background = `rgb(${color[blocknumber[i][j]]})`;
                    n.innerHTML = blocknumber[i][j];
                }
                
                else {
                    n.style.background = "url('https://imgur.com/ZUVDeyS.jpg')";
                    n.style.filter = `brightness(100%)`;
                    n.innerHTML = "";
                }
            }
        }
    }
}

function CheckPair() {
    for (let i = 0; i < dim; i++) {
        for (let j = 0; j < dim; j++) {
            try {
                if (blocknumber[i][j] == blocknumber[i+1][j]) {
                    return true;
                }
            }
            catch (e) {}
            try {
                if (blocknumber[i][j] == blocknumber[i][j+1]) {
                    return true;
                }
            }
            catch (e) {}
        }
    }
    return false;
}

function GameReplay() {
    var counts = 0;
    var win = 0;
    
    for (let i = 0; i < dim; i++) {
        for (let j = 0; j < dim; j++) {
            if (blocknumber[i][j] == 1) {
                counts++;
            }
            
            if (blocknumber[i][j] == WINNING_NUMBER) {
                win++;
            }
        }
    }
    
    if (win > 0) {
        clearInterval(t2);
        replay.style.display = "block";
        result.innerHTML = "YOU WON";
        won = true;
        clearInterval(t7);
        left.style.filter = "brightness(60%)";
        right.style.filer = "brightness(60%)";
        up.style.filter = "brightness(60%)";
        down.style.filter = "brightness(60%)";
        var t1 = setInterval(func,100);
        reduce = 50;
        pause = true;
        /*firebase.database().ref("test/2048").set({wins:fbwins+1,total:fbtotal+1});
        f();*/
        yes.onclick = function() {
            clearInterval(t1);
            alpha = 0;
            won = "no";
            pause = false;
            replay.style.display = "none";
            for (let i = 0; i < dim; i++) {
                for (let j = 0; j < dim; j++) {
                    blocknumber[i][j] = 1;
                }
            }
            reduce = 50;
            moves = 0;
            result.innerHTML = "YOU LOST";
            randomPlace();
            randomPlace();
            t2 = setInterval(GameReplay,10);
            AI();
            /*firebase.database().ref("test/2048").on('value',function(snapshot) {
                fbwins = parseInt(snapshot.val().wins);
                fbtotal = parseInt(snapshot.val().total);
            });*/
        }
    }
    
    else if (!CheckPair() && counts==0) {
        clearInterval(t2);
        won=false;
        pause=true;
        clearInterval(t7);
        left.style.filter = "brightness(60%)";
        right.style.filer = "brightness(60%)";
        up.style.filter = "brightness(60%)";
        down.style.filter = "brightness(60%)";
        replay.style.display = "block";
        var t1 = setInterval(func,100);
        reduce = 50;
        /*firebase.database().ref("test/2048").set({wins:fbwins,total:fbtotal+1});
        f();*/
        yes.onclick = function() {
            clearInterval(t1);
            alpha = 0;
            reduce = 50;
            replay.style.display = "none";
            won = "no";
            for (let i = 0; i < dim; i++) {
                for (let j = 0; j < dim; j++) {
                    blocknumber[i][j] = 1;
                }
            }
            pause=false;
            moves = 0;
            randomPlace();
            randomPlace();
            t2 = setInterval(GameReplay,10);
            AI();
            /*firebase.database().ref("test/2048").on('value',function(snapshot) {
                fbwins = parseInt(snapshot.val().wins);
                fbtotal = parseInt(snapshot.val().total);
            });*/
        }
    }
}

function func() {
    alpha+=0.02;
    result.style.color = `rgba(255,255,255,${alpha})`;
}

function reset() {
    var audio = document.getElementById("audio");
    if (audio.currentTime >= 1) {
        audio.pause();
        audio.currentTime = 0;
    }
}


function MyMoves() {
    var m = document.getElementById("moves");
    m.innerHTML = "Moves:"+moves;
}


function Rating() {
    var p = document.getElementById("progress");
    var rating = 0;
    var count1 = 0;
    var pair = 0;
    for (let i = 0; i < dim; i++) {
        for (let j = 0; j < dim; j++) {
            if (blocknumber[i][j] == 1) {
                count1++;
            }
            let power = 0;
            let n = blocknumber[i][j];
            while (n > 1) {
                power++;
                n/=2;
            }
            try {
                if (blocknumber[i][j] == blocknumber[i+1][j]) {
                    rating+=power/2
                    pair++;
                }
            }
            catch (e) {}
            try {
                if (blocknumber[i][j] == blocknumber[i][j+1]) {
                    rating+=power/2
                    pair++;
                }
            }
            catch (e) {}
            if (blocknumber[i][j] >= 16) {
                rating += power/2;
            }
        }
    }
    if (count1 < 2) {
        rating-=2;
    }
    if (count1 < 2 && pair < 2) {
        rating-=3;
    }
    var l = []
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
            l.push(blocknumber[i][j]);
        }
    }
    rating+=Math.max(...l)/32;
    if (Math.max(...l) >= 512) {
        rating+=Math.max(...l)/256;
    }
    
    if (Math.max(...l) >= 128) {
        rating+=count1*1.5;
    }
    else {
        rating+=count1
    }
    
    if (rating > 50 || won === true) {
        rating = 50;
    }
    if (rating < 0 || won === false) {
        rating = 0;
    }
    p.style.width = rating*2 + "%";
}

function F() {
    audio.volume = 0.2;
}


function AI() {
    up.style.filter = "brightness(60%)";
    left.style.filter = "brightness(60%)";
    right.style.filter = "brightness(60%)";
    down.style.filter = "brightness(60%)";
    var bn = blocknumber.slice();
    var applied = false;
    var applied2 = false;
    
    var counts = 0;
    
    if (moves < 10) {
        reduce = 50;
    }
    
    for (let i = 0; i < dim; i++) {
        for (let j = 0; j < dim; j++) {
            if (blocknumber[i][j] == 1) {
                counts++;
            }
        }
    }
    d = {
        "down":0,
        "left":0,
        "right":0,
    }
    var vals = ["down","left","right"];
    n = [[...bn[0]],[...bn[1]],[...bn[2]],[...bn[3]]];
    var funcs = [DownAI, LeftAI, RightAI];
    var newn,newnewn;
    var mymax = FindMax(n);
    if (mymax >= 64 && maxind === 12) {
        reduce = 20;
        funcs[2](n);
        mymax = FindMax(n);
        if (maxind !== 12) {
            d["right"]-=400;
            if (mymax >= 512) {
                reduce = -1;
            }
            applied = true;
        }
    }
    n = [[...bn[0]],[...bn[1]],[...bn[2]],[...bn[3]]];
    mymax = FindMax(n);
    if (mymax >= 512 && maxind === 12) {
        if (blocknumber[2][3] > blocknumber[3][3]) {
            reduce = 1;
        }/*
        else {
            if (blocknumber[2][3] <= blocknumber[3][3] && blocknumber[1][3] <= blocknumber[2][3] && blocknumber[0][3] <= blocknumber[1][3]) {
                reduce = -16;
                d["down"]+=blocknumber[2][3]/8
                if (blocknumber[1][3] === blocknumber[2][3] && blocknumber[2][3]*2===blocknumber[3][3]) {
                    d["down"]+=blocknumber[2][3]/2;
                }
            }
            else {
                reduce = -5;
            }
        }*/
    }
    else if (mymax >= 512) {
        reduce = 32;
    }
    
    if (mymax >= 512 && Math.min(blocknumber[3][1], blocknumber[3][2]) < Math.max(blocknumber[3][1], blocknumber[3][2]/2)) {
        var l = [blocknumber[3][1],blocknumber[3][2]];
        var lmin = l.indexOf(Math.min(...l))+1;
        applied2 = true;
    }
    
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
            if ((j < 3 && bn[i][j] == bn[i][j+1] && bn[i][j] != 1) || (j < 2 && bn[i][j] == bn[i][j+2] && bn[i][j] != 1 && bn[i][j+1] == 1) || (j < 1 && bn[i][j] == bn[i][j+3] && bn[i][j] != 1 && bn[i][j+1] == 1 && bn[i][j+2] == 1)) {
                d["left"]+=bn[i][j];
                d["right"]+=bn[i][j];
            }
            if ((i < 3 && bn[i][j] == bn[i+1][j] && bn[i][j] != 1) || (i < 2 && bn[i][j] == bn[i+2][j] && bn[i][j] != 1 && bn[i+1][j] == 1) || (i < 1 && bn[i][j] == bn[i+3][j] && bn[i][j] != 1 && bn[i+1][j] == 1 && bn[i+1][j] == 1)) {
                d["down"]+=bn[i][j];
            }
        }
    }
    
    if (applied2) {
        if (bn[2][lmin] === bn[3][lmin] || (bn[3][lmin] === bn[2][lmin]*2 && bn[2][lmin] === bn[1][lmin])) {
            d["down"]+=100;
        }
    }
    
    for (let k = 0; k < 3; k++) {
        funcs[k](n)
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 4; j++) {
                if ((j < 3 && n[i][j] == n[i][j+1] && n[i][j] != 1) || (i < 3 && n[i][j] == n[i+1][j] && n[i][j] != 1)) {
                    d[vals[k]] += n[i][j];
                }
            }
        }
        if (n[3][3] === n[2][3] || (n[3][3] === n[2][3] && n[2][3] === n[1][3])) {
            d[vals[k]] += n[3][3]*2;
        }
        newn = [[...n[0]],[...n[1]],[...n[2]],[...n[3]]];
        for (let l = 0; l < 3; l++) {
            funcs[l](newn);
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if ((j < 3 && newn[i][j] == newn[i][j+1] && newn[i][j] != 1) || (i < 3 && newn[i][j] == newn[i+1][j] && newn[i][j] != 1)) {
                        d[vals[k]] += newn[i][j]/2;
                    }
                }
            }
            if (counts >= 3) {
                newnewn = [[...newn[0]],[...newn[1]],[...newn[2]],[...newn[3]]];
                for (let m = 0; m < 3; m++) {
                    funcs[m](newnewn);
                    for (let i = 0; i < 4; i++) {
                        for (let j = 0; j < 4; j++) {
                            if ((j < 3 && newnewn[i][j] == newnewn[i][j+1] && newnewn[i][j] != 1) || (i < 3 && newnewn[i][j] == newn[i+1][j] && newnewn[i][j] != 1)) {
                                d[vals[k]] += newn[i][j]/3;
                            }
                        }
                    }
                }
            }
        }
        n = [[...bn[0]],[...bn[1]],[...bn[2]],[...bn[3]]];
    }
    
    var m = [];
    m.push(d["down"]);
    m.push(d["left"]);
    m.push(d["right"]-reduce);
    var max = m.indexOf(Math.max(...m));
    var checkrep = [[...bn[0]],[...bn[1]],[...bn[2]],[...bn[3]]];
    if (max == 2) {
        RightClick();
        right.style.filter = "brightness(100%)";
    }
    if (max == 1) {
        LeftClick();
        left.style.filter = "brightness(100%)";
    }
    if (max == 0) {
        DownClick();
        down.style.filter = "brightness(100%)";
    }
    var count = 0;
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
            if (blocknumber[i][j] != 1) {
                count++;
            }
        }
    }
    if (CheckSimilarity(blocknumber,checkrep) || count == 0) {
        if (max == 2) {
            DownClick();
            right.style.filter = "brightness(60%)";
            down.style.filter = "brightness(100%)";
        }
        if (max == 1) {
            DownClick();
            left.style.filter = "brightness(60%)";
            down.style.filter = "brightness(100%)";
        }
        if (max == 0) {
            LeftClick();
            up.style.filter = "brightness(60%)";
            left.style.filter = "brightness(100%)";
        }
    }
    moves++;
    randomPlace();
    if (!pause) {
        setTimeout(AI,100000.0/(document.getElementById("range").value+10));
    }
}

function CheckSimilarity(a,b) {
    for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
            if (a[i][j] != b[i][j]) {
                return false;
            }
        }
    }
    return true;
}

/*function f() {
    //console.log(ct1 + " " + ct2 + " | " + fbwins + " " + fbtotal);
    if (!([ct1,ct1+1].includes(fbwins) && [ct2,ct2+1].includes(fbtotal))) {
        //document.write(":(")
        firebase.database().ref("test/2048").set({wins:ct1+1,total:ct2+1});
        firebase.database().ref("test/spam").on('value',function(snapshot) {
            s = parseInt(snapshot.val().number);
        });
        setTimeout(function() {
            firebase.database().ref('test/spam').set({number:s+1});
        },10000);
    }
    else {
        ct1 = fbwins;
        ct2 = fbtotal;
    }
}
setTimeout(function() {var checkingt = setInterval(f, 2000);},1000);*/

function FindMax(a) {
    var m = Math.max(...[...a[0],...a[1],...a[2],...a[3]])
    maxind = [...a[0],...a[1],...a[2],...a[3]].indexOf(m)
    return m
}

function DownAI(n) {
    var c = [0,0,0,0];
    for (let i = n.length-1;i>-1;i--) {
        for (let j = 0; j < n[i].length;j++) {
            if (n[i][j] != 1) {
                [n[i][j],n[dim-1-c[j]][j]] = [1,n[i][j]];
                c[j]++;
            }
        }
    }
    
    for (let i = n.length-1; i > 0; i--) {
        for (let j = 0; j < n[i].length; j++) {
            if (n[i][j] == n[i-1][j] && n[i][j] != 1) {
                n[i][j] *= 2;
                n[i-1][j] = 1;
                DownAI(n);
            }
        }
    }
}

function UpAI(n) {
    var c = [0,0,0,0];
    for (let i = 0;i < n.length;i++) {
        for (let j = 0; j < n[i].length;j++) {
            if (n[i][j] != 1) {
                [n[i][j],n[c[j]][j]] = [1,n[i][j]];
                c[j]++;
            }
        }
    }
    
    for (let i = 0; i < n.length-1; i++) {
        for (let j = 0; j < n[i].length; j++) {
            if (n[i][j] == n[i+1][j] && n[i][j] != 1) {
                n[i][j] *= 2;
                n[i+1][j] = 1;
                UpAI(n);
            }
        }
    }
}

function LeftAI(n) {
    var c = [0,0,0,0];
    for (let i = 0; i < n.length; i++) {
        for (let j = 0; j < n[i].length; j++) {
            if (n[i][j] != 1) {
                [n[i][j],n[i][c[i]]] = [1,n[i][j]];
                c[i]++;
            }
        }
    }
    
    for (let i = 0; i < n.length; i++) {
        for (let j = 0; j < n.length-1; j++) {
            if (n[i][j] == n[i][j+1] && n[i][j] != 1) {
                n[i][j] *= 2;
                n[i][j+1] = 1;
                LeftAI(n);
            }
        }
    }
}

function RightAI(n) {
    var c = [0,0,0,0];
    for (let i = 0; i < n.length; i++) {
        for (let j = n.length-1; j > -1; j--) {
            if (n[i][j] != 1) {
                [n[i][j],n[i][dim-1-c[i]]] = [1,n[i][j]];
                c[i]++;
            }
        }
    }
    
    for (let i = 0; i < n.length; i++) {
        for (let j = n.length-1; j > 0; j--) {
            if (n[i][j] == n[i][j-1] && n[i][j] != 1) {
                n[i][j] *= 2;
                n[i][j-1] = 1;
                RightAI(n);
            }
        }
    }
}

/*
var firebaseConfig = {
    apiKey: "AIzaSyC2EuHWK-zb7yabg31oGYuFRwwFSOzfxko",
    authDomain: "jsnamit-dbd9b.firebaseapp.com",
    databaseURL: "https://jsnamit-dbd9b.firebaseio.com",
    projectId: "jsnamit-dbd9b",
    storageBucket: "jsnamit-dbd9b.appspot.com",
    messagingSenderId: "969284339798",
    appId: "1:969284339798:web:f8a02524f84c72572613f7"
};
*/
    
        </script>

        <style>
@import url('https://fonts.googleapis.com/css2?family=Sriracha&family=Raleway&display=swap');

body {
    height: 100vh;
    overflow-x: hidden;
    background: url("https://imgur.com/tZT0B9z.jpg");
    font-family: Raleway;
    justify-content: center;
    font-size: 20px;
}

#Game {
    display: none;
}

#load {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: white;
}

#Loader {
    position: absolute;
    font-size: 40px;
    color: rgb(220,70,170);
    font-weight: center;
    top: 40%;
    left: 30%;
    text-shadow: 3px 3px 9px rgba(50,50,50,0.5);
}

#box {
    background: orange;
    position: absolute;
    top: calc(5% + 2px);
    left: 5%;
    height: 320px;
    width: 320px;
    border-radius: 8px;
}

.block {
    position: absolute;
    border: 1px solid black;
    height: 78px;
    width: 78px;
    /*border-radius: 10%;*/
    text-align: center;
    line-height: 70px;
    font-size: 20px;
    font-weight: bolder;
}

.btn {
    position: absolute;
    top: calc(5% + 430px);
    width: 106px;
    height: 50px;
    font-size: 20px;
    background: url("https://imgur.com/ZUVDeyS.jpg");
    filter:brightness(60%) sepia(200%);
    background-size: cover;
    border: 1px solid black;
}

.btn:active {
    filter: brightness(100%);
}

#l {
    left: calc(5% + 0px);
}

#r {
    left: calc(5% + 212px);
}

#d {
    left: calc(5% + 106px);
}

#u {
    left: calc(5% + 106px);
    top: calc(5% + 380px);
}

#replay {
    display: none;
    position: absolute;
    color: white;
    top: 5%;
    left: 5%;
    height: 320px;
    width: 320px;
    background: rgba(100,100,255,0.5);
    text-align: center;
    font-size: 25px;
    font-weight: 900;
}

#yes {
    position: absolute;
    font-size: 20px;
    top: 210px;
    left: 20%;
    height: 40px;
    width: 60%;
    border-radius: 20px;
    background: white;
    border: 1px solid black;
}

#yes:hover {
    background: rgb(255,20,147);
}

#result {
    font-size: 40px;
    color: rgba(255,255,255,0);
}

#moves {
    position: absolute;
    top: 0;
    left: calc(5% + 230px);
    font-size: 20px;
}

#progress {
    position: absolute;
    transition: 1s;
    top: 0;
    left: 0;
    height: 100%;
    width: 50%;
    background: blue;
}

#main {
    position: absolute;
    left: 60px;
    top: 0;
    height:20px;
    width:180px;
    background: red;
}

b {
    position: absolute;
    left: -55px;
    top: 0;
    font-size: 17px;
    font-weight: 500;
}

#start {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: white;
    display: none;
}

#begin {
    position: absolute;
    top: 40%;
    left: 20%;
    height: 20%;
    width: 60%;
    background: rgb(220,70,170);
    font-size: 30px;
    text-align: center;
    color: white;
}

#range {
    position: absolute;
    top: calc(5% + 330px);
    left: 80px;
    height: 20px;
    width: 250px;
}

#speed {
    position: absolute;
    top: calc(5% + 330px);
    left: 5px;
}

        </style>
    </head>
    <body>
        <div id = "load">
            <div id = "Loader">Loading...</div>
        </div>
        <div id = "start">
            <button id = "begin">Start</button>
        </div>
        <div id = "Game">
            <div id = "main">
                <b>Rating:</b> <a id = "progress"></a>
            </div>
            <i id = "moves">Moves: </i>
            <audio id = "audio">
                <source src="http://docs.google.com/uc?export=open&amp;id=1KzGYeT9Td9zR3QDqIBMVNFd1P2gRf9yc" type="audio/mp3">
            </audio>
            <div id = "box"></div>
            <div id = "replay"><br><br>
                <div id = "result">YOU LOST</div><br><br>
                Do you want to play again?<br>
                <button id = "yes" class = "rbtn">Yes</button>
                <br><br>
            </div>
            <span id = "speed">Speed:</span> <input type="range" id = "range" min = "0" max = "15" value = "5">
            <button id = "l" class = "btn">left</button>
            <button id = "r" class = "btn">right</button>
            <button id = "u" class = "btn">up</button>
            <button id = "d" class = "btn">down</button>
        </div>
    </body>
</html>
